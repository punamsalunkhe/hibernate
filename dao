com.app.dao

1).BlogPostDao
package com.app.dao;

import com.app.entities.BlogPost;

public interface BlogPostDao {
//add new blog post
	String createNewBlog(BlogPost post, 
			Long categoryId, Long authorId);
}

2)BlogPostDaoImpl
package com.app.dao;

import static com.app.utils.HibernateUtils.getFactory;

import org.hibernate.Session;
import org.hibernate.Transaction;

import com.app.entities.BlogPost;
import com.app.entities.Category;
import com.app.entities.User;

public class BlogPostDaoImpl implements BlogPostDao {

	@Override
	public String createNewBlog(BlogPost post, Long categoryId, Long authorId) {
		String mesg = "adding new post failed....";
		// 1. get session from SF (getCurrentSession)
		Session session = getFactory().getCurrentSession();
		// 2. Begin a Tx
		Transaction tx = session.beginTransaction();
		try {
			// 1. get category from it's id
			Category cat = session.get(Category.class, categoryId);
			// 2 . get author from it's id
			User author = session.get(User.class, authorId);
			// null checking --if not null
			if (cat != null && author != null) {
				// establish asso between post --> author n post--> category
				// setter
				post.setChosenCategory(cat);
				post.setAuthor(author);
				// since no cascading yet -- explicitly persist post.
				session.persist(post);
				mesg = "added new post with id " + post.getId();

			}
			tx.commit();

		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			// re throw the exc to the caller
			throw e;
		}
		return mesg;
	}

}
3)categoryDao

package com.app.dao;

import com.app.entities.Category;

public interface CategoryDao {
	String addNewCategory(Category category);
}
4).categoryDaoImpl

package com.app.dao;

import static com.app.utils.HibernateUtils.getFactory;

import org.hibernate.Session;
import org.hibernate.Transaction;

import com.app.entities.Category;

public class CategoryDaoImpl implements CategoryDao {

	@Override
	public String addNewCategory(Category category) {
		String mesg="adding category failed";
		// 1. get session from SF (getCurrentSession)
		Session session = getFactory().getCurrentSession();
		// 2. Begin a Tx
		Transaction tx = session.beginTransaction();
		try {
			session.persist(category);
			tx.commit();
			mesg="Added new category with ID="+category.getId();
		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			// re throw the exc to the caller
			throw e;
		}
		return mesg;
	}

}
5).UserDao
package com.app.dao;

import java.io.IOException;
import java.time.LocalDate;
import java.util.List;

import com.app.entities.Role;
import com.app.entities.User;

public interface UserDao {
//add a method for user sign up
	String registerUser(User user);

	// add a method for user sign in
	User authenticateUser(String email, String password);

}
6).UserDaoImpl
package com.app.dao;

import org.apache.commons.io.FileUtils;
import org.hibernate.*;
import static com.app.utils.HibernateUtils.getFactory;

import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.time.LocalDate;
import java.util.List;

import com.app.entities.Role;
import com.app.entities.User;

public class UserDaoImpl implements UserDao {

	@Override
	public String registerUser(User user) {
		// user : transient(neither associated with L1 cache nor in DB)
		String mesg = "Registration failed !!!!";
		// 1. get Session from SF
		Session session = getFactory().getCurrentSession();

		// L1 cache is created -- EMPTY
		// 2. Begin a Tx
		Transaction tx = session.beginTransaction();

		try {
			// 3. Session API -- public void persist(Object o) throws HibExc
			session.persist(user); // user : persistent
			tx.commit();
			// rec will be inserted in db
			mesg = "User registered successfully , with ID =  " + user.getId();
		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			// re throw the exc to the caller
			throw e;
		}

		// user - DETACHED (doesn't exist in L1 cache , BUT has DB identity)
		return mesg;
	}

		@Override
	public User authenticateUser(String email, String password) {
		User user = null;
		String jpql = "select u from User u where u.email=:em and u.password=:pass";
		// 1. get session from SF (get curnt session)
		Session session = getFactory().getCurrentSession();
		// 2. begin a tx
		Transaction tx = session.beginTransaction();
		try {
			user = session.createQuery(jpql, User.class).setParameter("em", email).setParameter("pass", password)
					.getSingleResult();
			tx.commit();
		} catch (RuntimeException e) {
			if (tx != null)
				tx.rollback();
			// re throw the exception to the caller
			throw e;
		}

		return user;
	}

	
}
